# add this to .bash_rc
# if [ -f ~/.config/bash/.bash_ext ]; then
#     source ~/.config/bash/.bash_ext
# fi

alias ve='python3 -m venv ./venv'
alias va='source ./venv/bin/activate'
alias uve='uv venv'
alias uva='source ./.venv/bin/activate'
alias vim='nvim'
alias n='nvim'
alias nv='neovide'
alias gits='git status'
alias gitl='git log -15 --oneline'
alias gitc='git commit'
alias r='. ranger'
alias vzf='vim $(fzf)'
alias y='yy'
alias ze='zellij attach -c main'

function cl() {
    DIR="$*";
# if no DIR given, go home
    if [ $# -lt 1 ]; then 
	DIR=$HOME;
    fi;
    builtin cd "${DIR}" && \
# use your preferred ls command
	la --color=auto
}

mkcd ()
{
    mkdir -p -- "$1" && cd -P -- "$1"
}

enc-fix-keil ()
{
    find . -name '*.h' -exec iconv --verbose -f windows-1251 -t utf-8 -o {} {} \;
    find . -name '*.c' -exec iconv --verbose -f windows-1251 -t utf-8 -o {} {} \;
}

# =============================================================================
# yazi
function yy() {
    local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
	    cd -- "$cwd"
		fi
		rm -f -- "$tmp"
}

# =============================================================================
#
# Utility functions for zoxide.
#

# pwd based on the value of _ZO_RESOLVE_SYMLINKS.
function __zoxide_pwd() {
    \builtin pwd -L
}

# cd + custom logic based on the value of _ZO_ECHO.
function __zoxide_cd() {
    # shellcheck disable=SC2164
    \builtin cd -- "$@"
}

# =============================================================================
#
# Hook configuration for zoxide.
#

# Hook to add new entries to the database.
__zoxide_oldpwd="$(__zoxide_pwd)"

function __zoxide_hook() {
    \builtin local -r retval="$?"
    \builtin local pwd_tmp
    pwd_tmp="$(__zoxide_pwd)"
    if [[ ${__zoxide_oldpwd} != "${pwd_tmp}" ]]; then
        __zoxide_oldpwd="${pwd_tmp}"
        \command zoxide add -- "${__zoxide_oldpwd}"
    fi
    return "${retval}"
}

# Initialize hook.
if [[ ${PROMPT_COMMAND:=} != *'__zoxide_hook'* ]]; then
    PROMPT_COMMAND="__zoxide_hook;${PROMPT_COMMAND#;}"
fi

# =============================================================================
#
# When using zoxide with --no-cmd, alias these internal functions as desired.
#

__zoxide_z_prefix='z#'

# Jump to a directory using only keywords.
function __zoxide_z() {
    # shellcheck disable=SC2199
    if [[ $# -eq 0 ]]; then
        __zoxide_cd ~
    elif [[ $# -eq 1 && $1 == '-' ]]; then
        __zoxide_cd "${OLDPWD}"
    elif [[ $# -eq 1 && -d $1 ]]; then
        __zoxide_cd "$1"
    elif [[ ${@: -1} == "${__zoxide_z_prefix}"?* ]]; then
        # shellcheck disable=SC2124
        \builtin local result="${@: -1}"
        __zoxide_cd "${result:${#__zoxide_z_prefix}}"
    else
        \builtin local result
        # shellcheck disable=SC2312
        result="$(\command zoxide query --exclude "$(__zoxide_pwd)" -- "$@")" &&
            __zoxide_cd "${result}"
    fi
}

# Jump to a directory using interactive search.
function __zoxide_zi() {
    \builtin local result
    result="$(\command zoxide query --interactive -- "$@")" && __zoxide_cd "${result}"
}

# =============================================================================
#
# Commands for zoxide. Disable these using --no-cmd.
#

\builtin unalias z &>/dev/null || \builtin true
function z() {
    __zoxide_z "$@"
}

\builtin unalias zi &>/dev/null || \builtin true
function zi() {
    __zoxide_zi "$@"
}

# Load completions.
# - Bash 4.4+ is required to use `@Q`.
# - Completions require line editing. Since Bash supports only two modes of
#   line editing (`vim` and `emacs`), we check if either them is enabled.
# - Completions don't work on `dumb` terminals.
if [[ ${BASH_VERSINFO[0]:-0} -eq 4 && ${BASH_VERSINFO[1]:-0} -ge 4 || ${BASH_VERSINFO[0]:-0} -ge 5 ]] &&
    [[ :"${SHELLOPTS}": =~ :(vi|emacs): && ${TERM} != 'dumb' ]]; then
    # Use `printf '\e[5n'` to redraw line after fzf closes.
    \builtin bind '"\e[0n": redraw-current-line' &>/dev/null

    function __zoxide_z_complete() {
        # Only show completions when the cursor is at the end of the line.
        [[ ${#COMP_WORDS[@]} -eq $((COMP_CWORD + 1)) ]] || return

        # If there is only one argument, use `cd` completions.
        if [[ ${#COMP_WORDS[@]} -eq 2 ]]; then
            \builtin mapfile -t COMPREPLY < <(
                \builtin compgen -A directory -- "${COMP_WORDS[-1]}" || \builtin true
            )
        # If there is a space after the last word, use interactive selection.
        elif [[ -z ${COMP_WORDS[-1]} ]] && [[ ${COMP_WORDS[-2]} != "${__zoxide_z_prefix}"?* ]]; then
            \builtin local result
            # shellcheck disable=SC2312
            result="$(\command zoxide query --exclude "$(__zoxide_pwd)" --interactive -- "${COMP_WORDS[@]:1:${#COMP_WORDS[@]}-2}")" &&
                COMPREPLY=("${__zoxide_z_prefix}${result}/")
            \builtin printf '\e[5n'
        fi
    }

    \builtin complete -F __zoxide_z_complete -o filenames -- z
    \builtin complete -r zi &>/dev/null || \builtin true
fi

# fzf change to fdfind default command
# Set up fzf key bindings and fuzzy completion
eval "$(fzf --bash)"
export FZF_DEFAULT_COMMAND="fdfind . -IH"

# Add user-specific .local/bin to PATH
if [ -d "$HOME/.local/bin" ]; then
    export PATH="$HOME/.local/bin:$PATH"
fi

# nvim as default editor
export EDITOR=nvim
export SUDO_EDITOR=nvim
export PAGER=cat

# startup zellij automatically
# could also provide a zellij config to always attach to same session
# need terminal test here to prevent zellij running in nested terminals or tmux etc
#  -z "$ZELLIJ" checks if variable is empty, this sets when zellij is inside sesh
# export ZELLIJ_AUTO_ATTACH=true
# # THIS HERE below is taken from zellij setup --generate-auto-start but extra term check is added
# if [ "$TERM" = "xterm-ghostty" ] || [ "$TERM" = "xterm-kitty" ]; then
#   if [[ -z "$ZELLIJ" ]]; then # if not already inside a zellij session 
#       if [[ "$ZELLIJ_AUTO_ATTACH" == "true" ]]; then
#           zellij attach -c main
#       else
#           zellij
#       fi

#       # exit the whole termnal when exiting zellij
#       if [[ "$ZELLIJ_AUTO_EXIT" == "true" ]]; then
#           exit
#       fi
#   fi
#   # not entirely sure what this does
#   eval "$(zellij setup --generate-completion bash)"
# fi
